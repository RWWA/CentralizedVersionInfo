<?xml version="1.0" encoding="utf-8"?>
<!--
  <copyright file="WixBuild.Version.targets" company="Outercurve Foundation">
    Copyright (c) 2004, Outercurve Foundation.
    This software is released under Microsoft Reciprocal License (MS-RL).
    The license and further copyright text can be found in the file
    LICENSE.TXT at the root directory of the distribution.
  </copyright>
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="PrepareBuildVersionInfo" >
  <!--
  ================================================================================================
  FileRegexReplace

    Replaces text in file using regex. Does not write to file if content is not changed.
  ================================================================================================
  -->
  <UsingTask TaskName="FileRegexReplace" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Path ParameterType="System.String" Required="true" />
      <Pattern ParameterType="System.String" Required="true" />
      <Replacement ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
      if (!System.IO.File.Exists(Path))
        Path = "Properties\\AssemblyInfo.cs";
      if (!System.IO.File.Exists(Path))
        Log.LogError("Failed to locate AssemblyInfo.cs. Expected location: " + Path);
      string input = File.ReadAllText(Path);
      Regex rgx = new Regex(Pattern, RegexOptions.Multiline | RegexOptions.IgnoreCase);
      string result = rgx.Replace(input, Replacement);

      if (input != result)
        File.WriteAllText(Path, result);
]]>
      </Code>
    </Task>
  </UsingTask>

  <!--
  ================================================================================================
  OverrideFileIfContentIsChanged

    Compares content of file with desired content and if different it performs an update.
    Locks file for multhreaded access.
  ================================================================================================
  -->
  <UsingTask TaskName="OverrideFileIfContentIsChanged" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Path ParameterType="System.String" Required="true" />
      <Content ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
      string input = "";

      try{
        input = File.ReadAllText(Path);
      }
      catch{
        Log.LogMessage("Failed to read file " + Path);
      }

      try{
        if (input != Content)
          File.WriteAllText(Path, Content);
      }
      catch{
        Log.LogWarning("Failed to override file " + Path);
      }
]]>
      </Code>
    </Task>
  </UsingTask>

  <PropertyGroup>
    <UpdateVersionInfo>false</UpdateVersionInfo>
    <FullBuildVersionString>0.0.0.0</FullBuildVersionString>
    <FullSemVersionString>0.0.0</FullSemVersionString>
    <VersionInfoFileName>$([System.IO.Path]::Combine($(SolutionDir),$(VersionFile)))</VersionInfoFileName>
  </PropertyGroup>

  <!-- Central control over versioning -->
  <Target Name="PrepareBuildVersionInfo">
    <PropertyGroup Condition="Exists($(VersionInfoFileName))">
      <FullBuildVersionString>$([System.IO.File]::ReadAllText($(VersionInfoFileName)).Trim())</FullBuildVersionString>
      <MajorVersionNumber>$(FullBuildVersionString.Split(".")[0])</MajorVersionNumber>
      <MinorVersionNumber>$(FullBuildVersionString.Split(".")[1])</MinorVersionNumber>
      <BuildVersionNumber>$(FullBuildVersionString.Split(".")[2])</BuildVersionNumber>
      <RevisionVersionNumber>$(FullBuildVersionString.Split(".")[3])</RevisionVersionNumber>

      <!-- Override build number if BuildVersionNumberOverride present -->
      <BuildVersionNumber Condition=" '$(BuildVersionNumberOverride)' != '' ">$(BuildVersionNumberOverride)</BuildVersionNumber>
      <UpdateVersionInfo Condition=" '$(BuildVersionNumber)' != '0' ">true</UpdateVersionInfo>

      <FullBuildVersionString>$(MajorVersionNumber).$(MinorVersionNumber).$(BuildVersionNumber).$(RevisionVersionNumber)</FullBuildVersionString>
      <FullSemVersionString>$(MajorVersionNumber).$(MinorVersionNumber).$(BuildVersionNumber)</FullSemVersionString>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(AsmVersion)' != '' ">
      <FullBuildVersionString>$(AsmVersion)</FullBuildVersionString>
      <FullSemVersionString>$(AsmVersion)</FullSemVersionString>
      <UpdateVersionInfo>true</UpdateVersionInfo>
    </PropertyGroup>

    <PropertyGroup>
      <Version Condition="'$(Version)'!=''">$(FullSemVersionString)</Version>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <VersionPath>obj\</VersionPath>

    <SetupVersionFile>$(VersionPath)AssemblyVersion.wxi</SetupVersionFile>
    <AssemblyVersionFile Condition="Exists($(SolutionDir))">$(SolutionDir)AssemblyVersion.txt</AssemblyVersionFile>
  </PropertyGroup>

  <Target Name="WriteAssemblyVersionFile"
          Condition="Exists($(SolutionDir))"
          Returns="$(AssemblyVersionFile)">
    <OverrideFileIfContentIsChanged Path="$(AssemblyVersionFile)"
                                    Content="version=$(FullBuildVersionString)
semver=$(MajorVersionNumber).$(MinorVersionNumber).$(BuildVersionNumber)" />
    <ItemGroup>
      <FileWrites Include="$(AssemblyVersionFile)" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateAssemblyInfoVersion"
          Returns="@(AssemblyInfoFiles)"
          Condition=" '$(UpdateVersionInfo)' == 'true' and '$(Version)'==''"
          DependsOnTargets="WriteAssemblyVersionFile">

    <ItemGroup>
      <AssemblyInfoFiles Include="**\AssemblyInfo.cs" />
    </ItemGroup>

    <FileRegexReplace Path="@(AssemblyInfoFiles)"
                      Pattern="^(\[assembly\: Assembly(File)?Version\()\&quot;(.*)\&quot;"
                      Replacement="$1&quot;$(FullBuildVersionString)&quot;" />

    <Message Text="$(MSBuildProjectName) version: $(FullBuildVersionString)" Importance="high"/>
  </Target>
  
  <Target Name="ForceUpdateVersionInfo"
          BeforeTargets="BeforeRebuild"
          Condition=" '$(BuildVersionNumberOverride)' == '' ">
    <PropertyGroup>
      <UpdateVersionInfo>true</UpdateVersionInfo>
    </PropertyGroup>
    
    <Message Text="Force updating VersionInfo" Importance="high"/>
  </Target>

  <!--
  ================================================================================================
  WriteWixVersionFile

    Creates the AssemblyVersion.wxi version file for setup code.
  ================================================================================================
  -->
  <Target Name="WriteWixVersionFile"
          Returns="$(SetupVersionFile)">
    <ItemGroup>
      <WxiVersionLines Include="
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!-- generated by build system --&gt;
&lt;Include&gt;
  &lt;?define AssemblyVersion='$(FullBuildVersionString)' ?&gt;
&lt;/Include&gt;
"/>
    </ItemGroup>

    <Message Text="$(MSBuildProjectName) version: $(FullBuildVersionString)" Importance="high"/>

    <MakeDir Directories="$(VersionPath)"/>
    <OverrideFileIfContentIsChanged Path="$(SetupVersionFile)"
                                    Content="@(WxiVersionLines)" />
    <ItemGroup>
      <FileWrites Include="$(SetupVersionFile)" />
    </ItemGroup>
  </Target>

  <!--
  ================================================================================================
  CleanVersionFiles

    Deletes the AssemblyVersion.* version files.
  ================================================================================================
  -->
  <Target Name="CleanVersionFiles">
    <Delete Files="$(SetupVersionFile)"
            TreatErrorsAsWarnings="true" />
  </Target>

</Project>
